# Generated by Django 5.2.4 on 2025-08-11 09:37

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Categorie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom de la catégorie')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Catégorie',
                'verbose_name_plural': 'Catégories',
                'db_table': 'categories',
            },
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom du magasin')),
                ('location', models.CharField(max_length=200, verbose_name='Localisation dans le centre')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
            ],
            options={
                'verbose_name': 'Magasin',
                'verbose_name_plural': 'Magasins',
                'db_table': 'shops',
            },
        ),
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('negociated_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de négociation/inscription')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'db_table': 'utilisateurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name="Nom de l'article")),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Prix')),
                ('stock', models.IntegerField(default=0, verbose_name='Stock disponible')),
                ('opened_at', models.DateTimeField(auto_now_add=True, verbose_name="Date d'ouverture/création")),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articles', to='gest_store.categorie', verbose_name='Catégorie')),
            ],
            options={
                'verbose_name': 'Article',
                'verbose_name_plural': 'Articles',
                'db_table': 'articles',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Montant total')),
                ('transaction_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de transaction')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to=settings.AUTH_USER_MODEL, verbose_name='Client')),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='gest_store.shop', verbose_name='Magasin')),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'db_table': 'transactions',
                'ordering': ['-transaction_date'],
            },
        ),
        migrations.CreateModel(
            name='TransactionArticle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantite', models.IntegerField(default=1, verbose_name='Quantité achetée')),
                ('prix_unitaire', models.DecimalField(decimal_places=2, max_digits=10, verbose_name="Prix unitaire au moment de l'achat")),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gest_store.article')),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gest_store.transaction')),
            ],
            options={
                'verbose_name': 'Article de transaction',
                'verbose_name_plural': 'Articles de transaction',
                'db_table': 'transaction_articles',
                'unique_together': {('transaction', 'article')},
            },
        ),
        migrations.AddField(
            model_name='transaction',
            name='articles',
            field=models.ManyToManyField(related_name='transactions', through='gest_store.TransactionArticle', to='gest_store.article'),
        ),
        migrations.CreateModel(
            name='ShopArticle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stock', models.IntegerField(default=0, verbose_name='Stock dans ce magasin')),
                ('date_ajout', models.DateTimeField(auto_now_add=True, verbose_name="Date d'ajout dans le magasin")),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shop_articles', to='gest_store.article', verbose_name='Article')),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shop_articles', to='gest_store.shop', verbose_name='Magasin')),
            ],
            options={
                'verbose_name': 'Article en magasin',
                'verbose_name_plural': 'Articles en magasin',
                'db_table': 'shop_articles',
                'unique_together': {('shop', 'article')},
            },
        ),
    ]
